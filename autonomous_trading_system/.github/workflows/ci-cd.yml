name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          
      - name: Check code formatting with Black
        run: black --check .
        
      - name: Check imports with isort
        run: isort --check .
        
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']
        
    services:
      postgres:
        image: timescale/timescaledb:latest-pg14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          
      - name: Test with pytest
        run: |
          pytest --cov=./ --cov-report=xml
        env:
          # Use example values for environment variables
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY || 'example_key' }}
          UNUSUAL_WHALES_API_KEY: ${{ secrets.UNUSUAL_WHALES_API_KEY || 'example_key' }}
          ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY || 'example_key' }}
          ALPACA_API_SECRET: ${{ secrets.ALPACA_API_SECRET || 'example_secret' }}
          TIMESCALEDB_HOST: localhost
          TIMESCALEDB_PORT: 5432
          TIMESCALEDB_DATABASE: test_db
          TIMESCALEDB_USER: postgres
          TIMESCALEDB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push main image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./autonomous_trading_system/deployment/docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ats:latest
          
      - name: Build and push data acquisition image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./autonomous_trading_system/deployment/docker/data-acquisition.Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ats-data-acquisition:latest