name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pylint
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          
      - name: Check code formatting with Black
        run: black --check .
        
      - name: Check imports with isort
        run: isort --check .
        
      - name: Type checking with mypy
        run: mypy src tests
        
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Run pylint
        run: |
          pylint src tests --rcfile=.pylintrc || true

  build:
    name: Build Docker Images
    needs: lint
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
          
      - name: Build and push base image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./autonomous_trading_system/deployment/docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ats:${{ env.BRANCH_NAME }}
          
      - name: Build and push GPU-accelerated image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./autonomous_trading_system/deployment/docker/gpu-accelerated.Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ats-gpu:${{ env.BRANCH_NAME }}
          
      - name: Build and push component images
        run: |
          # Build and push each component image
          for component in data-acquisition feature-engineering model-training trading-strategy monitoring continuous-learning; do
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ats-${component}:${{ env.BRANCH_NAME }} \
              -f ./autonomous_trading_system/deployment/docker/${component}.Dockerfile .
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/ats-${component}:${{ env.BRANCH_NAME }}
          done
          
      - name: Notify Slack on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: ci-cd
          SLACK_COLOR: good
          SLACK_TITLE: CI/CD Pipeline Successful
          SLACK_MESSAGE: "Branch ${{ env.BRANCH_NAME }} - All images built and pushed successfully!"
          
      - name: Notify Slack on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: ci-cd
          SLACK_COLOR: danger
          SLACK_TITLE: CI/CD Pipeline Failed
          SLACK_MESSAGE: "Branch ${{ env.BRANCH_NAME }} - Build or push failed. Please check the logs."